{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport incrmmean from '@stdlib/stats-incr-mmean' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport atan from '@stdlib/math-base-special-atan' ;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean arctangent absolute percentage error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmaape( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~0.32\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~0.65\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.59\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~0.66\n*\n* m = accumulator();\n* // returns ~0.66\n*/\nfunction incrmmaape( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '0e08T', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean arctangent absolute percentage error. If not provided input values, the accumulator function returns the current mean arctangent absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean arctangent absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( atan( abs( (a-f)/a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmaape;\n"],"names":["incrmmaape","W","mean","isPositiveInteger","TypeError","format","incrmmean","f","a","arguments","length","atan","abs"],"mappings":";;8cA2DA,SAASA,EAAYC,GACpB,IAAIC,EACJ,IAAMC,EAAmBF,GACxB,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAGvC,OADAC,EAAOI,EAAWL,GAWlB,SAAsBM,EAAGC,GACxB,GAA0B,IAArBC,UAAUC,OACd,OAAOR,IAER,OAAOA,EAAMS,EAAMC,GAAMJ,EAAED,GAAGC"}